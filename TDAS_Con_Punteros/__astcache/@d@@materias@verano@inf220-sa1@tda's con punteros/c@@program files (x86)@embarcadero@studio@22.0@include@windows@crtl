//---------------------------------------------------------------------------

#pragma hdrstop

#include "Matriz_dispersa.h"
Matriz_dispersa::Matriz_dispersa(): dimf(0), dimc(0), rep(0), ptrMatD(nullptr) {}

void Matriz_dispersa::dimencionar(int df, int dc) {
    dimf = df;  dimc = dc;
}

int Matriz_dispersa::dimencion_fila() { return dimf; }

int Matriz_dispersa::dimencion_columna() { return dimc; }

bool Matriz_dispersa::direccion_valida(int f, int c) {
    if ((f > 0 && f <= dimencion_fila()) && (c > 0 && c <= dimencion_columna()))
        return true;
    return false;
}

Matriz_dispersa::direccion Matriz_dispersa::buscar_nodo(int f, int c) {
    if (!direccion_valida(f, c))
        throw Exception("Direcciones no validas");
    for (direccion x = ptrMatD; x; x = x->sig) {
        if (x->fila == f && x->columna == c)
            return x;
    }
    return nullptr;
}

void Matriz_dispersa::poner_dato(int f, int c, int valor) {
    if (!direccion_valida(f, c))
        throw Exception("Direcciones no validas");
    /*if (valor == rep && !esta_registrada(f, c))
        posiciones_repetidas.push_back({f, c});
    else if (valor != rep && esta_registrada(f, c)) {
        posiciones_repetidas.erase(
            remove_if(posiciones_repetidas.begin(), posiciones_repetidas.end(),
            [f, c](const pair<int, int>& pos) {
                return pos.first == f && pos.second == c;
            }), posiciones_repetidas.end()
        );
	}  */

    direccion existe = buscar_nodo(f, c);
    if (existe) {
        existe->dato = valor;
        if (valor == rep)
            eliminar_nodo(f, c);
    } else {
        direccion x = new Nodo();
        x->dato = valor;
        x->columna = c;
        x->fila = f;
        x->sig = ptrMatD;
        ptrMatD = x;
        nt++;
    }
}

void Matriz_dispersa::eliminar_nodo(int f, int c) {
    direccion act = ptrMatD;
    direccion ant = nullptr;
    while (act && act->columna != c && act->fila != f) {
        ant = act;
        act = act->sig;
    }

    if (act) {
        if (ant)
            ant->sig = act->sig;
        else
            ptrMatD = act->sig;
        delete act;
        nt--;
    }
}

void Matriz_dispersa::dibujar(TCanvas *canvas, int x, int y,
                        int ancho_celda, int alto_celda, const string &mensaje, TColor color, bool con_borde) {

    TRect rect(x, y, x + ancho_celda, y + alto_celda);
    canvas->Brush->Color = color;
    canvas->FillRect(rect);
    canvas->TextOut(x + 3, y + 3, mensaje.c_str());

    if (con_borde) {
        canvas->Pen->Color = clBlack;
        canvas->MoveTo(x, y);
        canvas->LineTo(x + ancho_celda, y);
        canvas->LineTo(x + ancho_celda, y + alto_celda);
        canvas->LineTo(x, y + alto_celda);
        canvas->LineTo(x, y);
    }
}

void Matriz_dispersa::dibujar_matriz(TCanvas *canvas, int x_inicial, int y_inicial,
                                     int ancho_celda, int alto_celda) {
    int x, y;
    for (int fila = 1; fila <= dimf; ++fila) {
        for (int columna = 1; columna <= dimc; ++columna) {
            x = x_inicial + (columna - 1) * ancho_celda;
            y = y_inicial + (fila - 1) * alto_celda;

            // Valor del nodo en la posición actual
            direccion nodo = buscar_nodo(fila, columna);

            // Determina el mensaje y color según el contenido
            string mensaje = nodo ? std::to_string(nodo->dato) : to_string(rep);
            //TColor color = nodo ? clSkyBlue : clWhite;
            bool con_borde = true;

            // Dibujar la celda
            dibujar(canvas, x, y, ancho_celda, alto_celda, mensaje, clWhite, con_borde);
        }
    }
}



//---------------------------------------------------------------------------
#pragma package(smart_init)
